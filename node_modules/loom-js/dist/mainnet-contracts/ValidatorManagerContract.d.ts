/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter } from "ethers";
import { Provider } from "ethers/providers";
import { BigNumber } from "ethers/utils";
import { TransactionOverrides } from ".";

export class ValidatorManagerContract extends Contract {
  functions: {
    validators(arg0: number | string | BigNumber): Promise<string>;

    powers(arg0: number | string | BigNumber): Promise<BigNumber>;

    nonces(arg0: string): Promise<BigNumber>;

    allowedTokens(arg0: string): Promise<boolean>;

    signedByValidator(
      _message: string,
      signersIndex: number | string | BigNumber,
      _v: number | string | BigNumber,
      _r: string,
      _s: string
    ): Promise<void>;

    checkThreshold(
      _message: string,
      signersIndex: (number | string | BigNumber)[],
      _v: (number | string | BigNumber)[],
      _r: (string)[],
      _s: (string)[]
    ): Promise<void>;

    isTokenAllowed(tokenAddress: string): Promise<boolean>;

    rotateValidators(
      _newValidators: (string)[],
      _newPowers: (number | string | BigNumber)[],
      _signIndexes: (number | string | BigNumber)[],
      _v: (number | string | BigNumber)[],
      _r: (string)[],
      _s: (string)[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    toggleAllowAnyToken(
      allow: boolean,
      validatorIndex: number | string | BigNumber,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    toggleAllowToken(
      tokenAddress: string,
      allow: boolean,
      validatorIndex: number | string | BigNumber,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    loomAddress(): Promise<string>;
    threshold_denom(): Promise<BigNumber>;
    nonce(): Promise<BigNumber>;
    threshold_num(): Promise<BigNumber>;
    totalPower(): Promise<BigNumber>;
    getPowers(): Promise<(BigNumber)[]>;
    getValidators(): Promise<(string)[]>;
  };
  filters: {
    ValidatorSetChanged(_validators: null, _powers: null): EventFilter;
  };
}
