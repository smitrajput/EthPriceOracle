/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter } from "ethers";
import { Provider } from "ethers/providers";
import { BigNumber } from "ethers/utils";
import { TransactionOverrides } from ".";

export class ERC20Gateway extends Contract {
  functions: {
    checkValidator(_address: string): Promise<boolean>;

    nonces(arg0: string): Promise<BigNumber>;

    allowedTokens(arg0: string): Promise<boolean>;

    getERC20(contractAddress: string): Promise<BigNumber>;

    toggleToken(
      _token: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    addValidator(
      _validator: string,
      _v: (number | string | BigNumber)[],
      _r: (string)[],
      _s: (string)[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    removeValidator(
      _validator: string,
      _v: (number | string | BigNumber)[],
      _r: (string)[],
      _s: (string)[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      _newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    withdrawERC20(
      amount: number | string | BigNumber,
      sig: (string)[],
      contractAddress: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    depositERC20(
      amount: number | string | BigNumber,
      contractAddress: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    toggleAllowAnyToken(
      _allow: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    loomAddress(): Promise<string>;
    numValidators(): Promise<BigNumber>;
    allowAnyToken(): Promise<boolean>;
    owner(): Promise<string>;
    nonce(): Promise<BigNumber>;
  };
  filters: {
    ERC20Received(from: null, amount: null, contractAddress: null): EventFilter;

    TokenWithdrawn(
      owner: string | null,
      kind: null,
      contractAddress: null,
      value: null
    ): EventFilter;

    LoomCoinReceived(
      from: string | null,
      amount: null,
      loomCoinAddress: null
    ): EventFilter;

    AddedValidator(validator: null): EventFilter;

    RemovedValidator(validator: null): EventFilter;

    OwnershipRenounced(previousOwner: string | null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };
}
